package fi.haagahelia.course.web;

import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.ResponseBody;

import fi.haagahelia.course.domain.Book;
import fi.haagahelia.course.domain.BookRepository;
import fi.haagahelia.course.domain.CategoryRepository;



@Controller
public class BookstoreController {
	
	@Autowired
	private BookRepository bookRepository; 
	
	 @Autowired
	 private CategoryRepository categoryRepository;
	 
	//Viikko3, tehtävä 2
    @RequestMapping(value="/booklist")
    public String bookList(Model model) {	
    	//käytämme CrudRepository tarjoamaa findAll-metodia
        model.addAttribute("books", bookRepository.findAll());
        //mennään booklist.html sivulle
        return "booklist";
    }
  
    //Viikko 3, tehtävä 3 Create feature, osa 1
    //avaa addbook.html sivun ja tarjoaa sille tyhjän book-olion
    @RequestMapping(value = "/add")
    public String addBook(Model model){
    	//lisätään model muuttujaan attribuutti "book", 
    	//jonka sisälle talletetaan tyhjä book-olio
    	model.addAttribute("book", new Book());
    	model.addAttribute("categories", categoryRepository.findAll());
    	//mennään addbook.html-sivulle
        return "addbook";
    }     
    
    //Viikko 3, tehtävä 3 Create feature, osa 2: tekee varsinaisen tallennuksen
    @RequestMapping(value = "/save", method = RequestMethod.POST)
    public String save(Book book){
    	System.out.println("save book " + book.toString());
    	//käytetään Crudrepository-luokan valmista metodia
        bookRepository.save(book);
        return "redirect:booklist";
    }    

    //Viikko 3, tehtävä 3 Delete ominaisuus
    //Luetaan polkumuuttujasta tuhottavan kirjan id
    @RequestMapping(value = "/delete/{id}", method = RequestMethod.GET)
    public String deleteBook(@PathVariable("id") Long id, Model model) {
    	//käytetään Crudrepository-luokan valmista metodia
    	//
    	bookRepository.deleteById(id);
    	//<version>1.4.0.RELEASE</version>
    	//bookRepository.delete(id);
        return "redirect:../booklist";
    }
    
    //Viikko3, tehtävä4. Luetaan muutettavan olion id pathvariablen avulla
    @RequestMapping(value = "/update/{id}", method = RequestMethod.GET)
    public String updateBook(@PathVariable("id") Long id, Model model) {
    	//etsitään id:n perusteella entiteetti, huom. loppuun .get, jotta saat vastauksen luokkana.
    	//
    	Book book = bookRepository.findById(id).get();
    	//<version>1.4.0.RELEASE</version>
    	//Book book = bookRepository.findOne(id);
    	System.out.println("update book " + book.toString());
    	model.addAttribute("book", book);
        return "updateBook";
    }
    
    
    //Viikko 5 REST-harjoitukset 
	// RESTful service to get all books
    @RequestMapping(value="/books", method = RequestMethod.GET)
    public @ResponseBody List<Book> bookListRest() {	
        return (List<Book>) bookRepository.findAll();
    }    

	// RESTful service to get student by id
    @RequestMapping(value="/book/{id}", method = RequestMethod.GET)
    public @ResponseBody Book findBookRest(@PathVariable("id") Long bookId) {	
    	//<version>2.0.2.RELEASE</version>
    	return bookRepository.findById(bookId).get();
    	//<version>1.4.0.RELEASE</version>
    	//return bookRepository.findOne(bookId);
    	
    }       
    
    
    
}
